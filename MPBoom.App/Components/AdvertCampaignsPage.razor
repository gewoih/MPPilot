@page "/advertCampaigns";

@using MPBoom.App.Components.Offcanvases;
@using MPBoom.App.Domain.Interfaces;
@using MPBoom.App.Domain.Models;
@using MPBoom.App.Domain.Utils;
@using MPBoom.Core.Models;
@using MPBoom.Core.Services;

@if (!string.IsNullOrEmpty(_userSettings?.WildberriesApiKey))
{
    <Offcanvas @ref="_offcanvas" />

    <Grid 
        TItem="AdvertCampaign" 
        AllowSorting="true"
        AllowPaging="true"
        PageSize="10"
        Class="table table-hover table-bordered table-striped" 
        DataProvider="AdvertCampaignsDataProvider" 
        Responsive="true"
        ItemsPerPageText="Тест"
        PageSizeSelectorItems=@(new int[] {5, 10, 50})
        PaginationItemsTextFormat="{0}-{1} из {2} кампаний"
        AllowRowClick="true"
        OnRowClick="ShowAdvertCampaignSettings">
        
        <GridColumn TItem="AdvertCampaign" HeaderText="Тип" SortKeySelector="item => item.Type">@context.Type.GetDescription()</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Название" SortKeySelector="item => item.Name">@context.Name</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Артикул товара" SortKeySelector="item => item.ProductArticle">@context.ProductArticle</GridColumn>
        
        <GridColumn TItem="AdvertCampaign" HeaderText="CPM" SortKeySelector="item => item.CPM">@(context.CPM)р.</GridColumn>
        
        <GridColumn TItem="AdvertCampaign" HeaderText="Рек. позиция"></GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Реал. позиция"></GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Дневной бюджет"></GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Остаток дневного бюджета "></GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Общий остаток бюджета"></GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Статус" SortKeySelector="item => item.Status">@context.Status.GetDescription()</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Просмотры" SortKeySelector="item => item.TotalViews">@context.TotalViews</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="CTR" SortKeySelector="item => item.CTR">@context.CTR</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="CPC" SortKeySelector="item => item.CPC">@context.CPC.ToString("0.00")</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Кликов" SortKeySelector="item => item.Clicks">@context.Clicks</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Заказов" SortKeySelector="item => item.Orders">@context.Orders</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Стоимость заказа" SortKeySelector="item => item.OrderCost">@context.OrderCost</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Потрачено" SortKeySelector="item => item.TotalSpent">@context.TotalSpent</GridColumn>

        <GridColumn TItem="AdvertCampaign" HeaderText="Состояние">
            <Switch @bind-Value="@(context.IsEnabled)" Disabled="@(!context.IsAvailableToEnable)" />
        </GridColumn>
    </Grid>
}

@code {
    [Inject] 
    private WildberriesService _wildberriesService { get; set; }
    
    [Inject] 
    private ILocalStorageService _localStorageService { get; set; }
    
    [Inject] 
    IConfiguration _configuration { get; set; }
    
    [Inject] 
    ToastService _notificationsService { get; set; }
    
    private UserSettings? _userSettings;
    private IEnumerable<AdvertCampaign> _advertCampaigns;
    private Offcanvas _offcanvas = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _userSettings = await _localStorageService.GetUserSettings(_configuration);
        if (string.IsNullOrEmpty(_userSettings?.WildberriesApiKey))
        {
            _notificationsService.Notify(new ToastMessage
            {
                Message = "Для работы с этой страницей установите API-ключ для Wildberries в настройках",
                Title = "Не установлен API-ключ",
                Type = ToastType.Warning
            });
        }
        else
        {
            _wildberriesService.SetApiKey(_userSettings.WildberriesApiKey);
            StateHasChanged();
        }
    }

    private async Task<GridDataProviderResult<AdvertCampaign>> AdvertCampaignsDataProvider(GridDataProviderRequest<AdvertCampaign> request)
    {
        if (_advertCampaigns is null)
            _advertCampaigns = await _wildberriesService.GetAdvertCampaignsAsync(count: 5);

        return await Task.FromResult(request.ApplyTo(_advertCampaigns));
    }
    
    private async Task ShowAdvertCampaignSettings(GridRowEventArgs<AdvertCampaign> argument)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("AdvertCampaign", argument.Item);
        await _offcanvas.ShowAsync<AdvertCampaignSettings>(title: "Настройки РК", parameters: parameters);
    }
}
