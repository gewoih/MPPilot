@using System.Reflection;
@using MPBoom.App.Components.ConfirmDialogs;
@using MPBoom.Domain.Enums;
@using MPBoom.Domain.Models;
@using MPBoom.Domain.Services;
@using MPBoom.Domain.Utils;

<ConfirmDialog @ref="_updateDialog" />

<Tabs @ref="_tabs">
	<Tab Title="Параметры РК">
		<Content>
			<EditForm Model="@_changedAdvertCampaign" class="form-check-inline" OnSubmit="@(async () => await SaveChanges())">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group">
					<label style="padding-top: 5px">Название кампании:</label>
					<InputText style="width: 300px" onblur="@OnAdvertCampaignChanged" class="form-control" @bind-Value="_changedAdvertCampaign.Name" />

					<label style="padding-top: 5px">Ключевая фраза:</label>
					<InputText onblur="@OnAdvertCampaignChanged" class="form-control" @bind-Value="_changedAdvertCampaign.Keyword" />

					<label style="padding-top: 5px">Состояние:</label>
					<InputSelect onblur="@OnAdvertCampaignChanged" class="form-control" @bind-Value="_changedAdvertCampaign.Status">
						<option value="@AdvertStatus.InProgress">@AdvertStatus.InProgress.GetDescription()</option>
						<option value="@AdvertStatus.Stopped">@AdvertStatus.Stopped.GetDescription()</option>
					</InputSelect>
				</div>

				<div style="padding-top: 10px">
					<button type="submit" class="btn btn-primary" disabled="@(!_updatedProperties.Any())">Сохранить</button>
				</div>
			</EditForm>
		</Content>
	</Tab>
	<Tab Title="Автобиддер">
		<Content>
		</Content>
	</Tab>
</Tabs>

@code {
	[Parameter]
	public Advert AdvertCampaign { get; set; }

	[Parameter]
	public WildberriesService WildberriesService { get; set; }

	[Inject]
	private PreloadService _preloadService { get; set; }

	[Inject]
	ToastService _notificationsService { get; set; }

	private ConfirmDialog _updateDialog;
	private Advert _changedAdvertCampaign { get; set; }
	private List<PropertyInfo> _updatedProperties { get; set; }
	private Tabs _tabs = default!;

	protected override async Task OnInitializedAsync()
	{
		_changedAdvertCampaign = AdvertCampaign.GetDeepCopy();
		_updatedProperties = new();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (_changedAdvertCampaign.AdvertId != AdvertCampaign.AdvertId)
		{
			_changedAdvertCampaign = AdvertCampaign.GetDeepCopy();
			await _tabs.ShowTabByIndexAsync(0);
			StateHasChanged();
		}
	}

	private async Task SaveChanges()
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("OldCampaign", AdvertCampaign);
		parameters.Add("NewCampaign", _changedAdvertCampaign);
		parameters.Add("UpdatedProperties", _updatedProperties);

		var confirmation = await _updateDialog.ShowAsync<UpdateAdvertPage>("Подтвердите обновление РК", parameters);
		if (confirmation)
		{
			_preloadService.Show();
			var result = await UpdateAdvert();
			_preloadService.Hide();

			if (result.IsUpdateFailed)
			{
				var message = $"Произошла неизвестная ошибка при сохранении следующих параметров: {result.GetNonUpdatedFieldsString()}";
				_notificationsService.Notify(new ToastMessage() { Type = ToastType.Danger, Title = "Ошибка при сохранении РК", Message = message });
			}
			else
			{
				_notificationsService.Notify(new ToastMessage()
					{
						Type = ToastType.Success,
						Title = "Настройки РК сохранены",
						Message = "Все настройки РК успешно сохранены"
					});
			}

			AdvertCampaign = _changedAdvertCampaign.GetDeepCopy();
			_updatedProperties.Clear();
		}
	}

	private async Task<AdvertUpdateResult> UpdateAdvert()
	{
		var result = new AdvertUpdateResult();
		var advertId = _changedAdvertCampaign.AdvertId;

		if (AdvertCampaign.Status != _changedAdvertCampaign.Status)
			result.IsStatusChanged = await WildberriesService.ChangeAdvertStatus(advertId, _changedAdvertCampaign.Status);

		if (AdvertCampaign.Name != _changedAdvertCampaign.Name)
			result.IsNameChanged = await WildberriesService.RenameAdvert(advertId, _changedAdvertCampaign.Name);

		if (AdvertCampaign.Keyword != _changedAdvertCampaign.Keyword)
			result.IsKeywordChanged = await WildberriesService.ChangeAdvertKeyword(advertId, _changedAdvertCampaign.Keyword);

		return result;
	}

	private void OnAdvertCampaignChanged()
	{
		_updatedProperties = AdvertCampaign.GetPropertiesDifference(_changedAdvertCampaign);
	}
}